**智能自动化API生成平台 - 系统设计文档**

**1. 引言**

**1.1. 项目背景**
在日常工作与生活中，用户频繁在网页上执行重复性、流程化操作（如市场分析师搜集数据、运营人员发布内容、个人查询天气/股票等）。当前实现这些操作的自动化需编写代码，技术门槛高、费时费力。本系统旨在让非技术人员通过直观方式将手动网页操作固化为可调用、可分享的Python函数。

**1.2. 系统目标**
核心目标是打造“录制即代码”的本地命令行工具，实现以下目标：
- **极致简化** ：用户操作一遍网页即可自动生成基础脚本。
- **智能泛化** ：利用大语言模型（LLM）识别流程可变部分并转化为函数参数。
- **命令行驱动** ：通过终端交互完成测试、修改和确认。
- **代码化交付** ：生成干净、可移植的Python函数。

**1.3. 范围**
- **范围内** ：
  - 提供命令行网页操作录制功能，支持保存/加载认证状态（如Cookie）。
  - 录制时捕获操作截图、元素信息等上下文。
  - 集成LLM分析录制脚本并提供参数化建议。
  - 提供CLI供用户测试、修改并确认AI建议。
  - 生成独立Python函数并保存到本地文件。
- **范围外** ：
  - 复杂条件判断与循环逻辑的自动生成（未来规划）。
  - 复杂反爬虫策略应对。

**2. 系统概述**

**2.1. 核心理念**
系统核心为 **“演示-理解-确认与微调”** 三步曲：
1. **用户演示 (Demonstrate)** ：用户通过录制功能“教”系统操作流程（明确“做什么”）。
2. **AI 理解 (Understand & Generalize)** ：LLM结合录制代码、截图、DOM信息，将具体案例泛化为通用模板（明确“如何更灵活”）。
3. **人工确认与微调 (Confirm & Refine)** ：用户通过命令行验证AI参数化建议，通过自然语言指令迭代修改，最终生成可重用Python函数。

**2.2. 高层架构图**
```
+------------------+      +---------------------------------+      +-------------------+
|                  |      |                                 |      |                   |
|   用户命令行界面    |----->|      本地应用核心 (Python)      |<---->|    大语言模型 API   |
|     (User CLI)   |      |                                 |      |      (LLM API)    |
|                  |<-----|                                 |      |                   |
+------------------+      +---------------------------------+      +-------------------+
                             |           ^
                             |           |
                             v           |
                       +-------------------------+
                       |    本地文件系统         |
                       | (存储录制会话, 函数代码) |
                       +-------------------------+
```

**3. 详细设计**

**3.1. 模块一：增强型智能录制**
- **目标** ：捕获用户操作并附加丰富上下文供AI理解。
- **流程** ：
  1. 用户通过命令行启动录制（如`python main.py record --output-dir my_session`）。
  2. 本地应用启动带界面的Playwright浏览器并附加codegen工具。
  3. 用户执行完整操作（含登录步骤）。
  4. 注入监听脚本捕获关键交互事件的上下文（高亮截图、DOM片段）。
  5. 关闭浏览器自动结束录制。
  6. 持久化认证状态（通过`context.storage_state()`保存`auth_state.json`）。
  7. 打包所有信息到指定本地文件夹。
- **产出** ：录制会话文件夹（含`script.py`原始代码、`log.json`操作日志、`auth_state.json`认证状态、`/screenshots`截图文件夹）。

**3.2. 模块二：AI分析与参数化**
- **目标** ：将录制脚本转化为带参数的通用函数。
- **流程** ：
  1. 用户启动分析指令并指向录制会话文件夹。
  2. 本地应用整合上下文包生成多模态Prompt（包含角色设定、任务描述、输入（代码/日志/截图）、输出格式要求）。
  3. 调用LLM（如Gemini）API获取结构化JSON结果（含重构函数代码和参数列表）。
- **产出** ：AI分析结果的JSON对象。

**3.3. 模块三：人机协同审核**
- **目标** ：通过命令行交互让用户测试、确认和微调AI建议。
- **流程** ：
  1. 参数化建议与输入：程序提示用户输入参数测试值。
  2. 自动化执行与验证：加载`auth_state.json`恢复登录，启动浏览器执行流程，用户观察验证。
  3. 结果反馈：询问用户是否满意（`y/n/retry`）。
  4. 交互式代码微调（CLI）：用户输入自然语言修改指令，LLM生成修改代码并展示，循环验证直至用户确认。

**3.4. 模块四：函数生成与导出**
- **目标** ：将确认后的脚本打包为清晰、可重用的Python函数。
- **流程** ：
  1. 用户确认后自动进入此模块。
  2. 代码打包：封装核心逻辑到主函数，动态生成函数签名（含确认参数），添加必要`import`语句，生成详细文档字符串（含用法示例）。
  3. 用户交付：命令行打印最终代码，保存到`.py`文件（如`generated_function.py`）并告知路径。

**4. 技术选型**
- **核心引擎** ：Playwright（提供录制、元素定位、自动等待能力）。
- **应用框架** ：纯Python脚本（核心逻辑由Python实现）。
- **命令行交互** ：Python `argparse`/`Click`（创建用户友好CLI）。
- **AI模型** ：Gemini（或多模态LLM，支持代码+截图理解）。
- **数据存储** ：本地文件系统（文件夹+JSON文件存储会话和配置）。
